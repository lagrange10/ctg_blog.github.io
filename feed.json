{
    "version": "https://jsonfeed.org/version/1",
    "title": "Hexo",
    "subtitle": "",
    "icon": "https://lagrange10.github.io/ctg_blog.github.io/images/favicon.ico",
    "description": "",
    "home_page_url": "https://lagrange10.github.io/ctg_blog.github.io",
    "items": [
        {
            "id": "https://lagrange10.github.io/ctg_blog.github.io/2022/07/11/DeepLearning1-basic/",
            "url": "https://lagrange10.github.io/ctg_blog.github.io/2022/07/11/DeepLearning1-basic/",
            "title": "DeepLearning1_basic",
            "date_published": "2022-07-11T03:24:13.000Z",
            "content_html": "<h1 id=\"学习心得\"><a class=\"anchor\" href=\"#学习心得\">#</a> 学习心得</h1>\n<p>从 0 开始的学习，虽然对任何事情都充满了好奇心，但由于有些知识并没有足够的经验来立刻理解，理解它们需要进一步搜寻前置的知识 (eg: 以前没遇到过的 python 语法，库，术语)。</p>\n<p>保留了一些目前理解不了的细节 (eg: 在代码中如何用 matplotlib 画出图，感觉跟主线的关系不大就先跳过了) 留在以后回看。</p>\n<p>在这一周中主要完成了以下内容</p>\n<ul>\n<li>环境安装</li>\n<li>数学基础 (主要是矩阵求导以及自动求导)</li>\n<li>从自然语言、数学语言、计算机语言的不同角度学习了 2 个基本的单层神经网络\n<ul>\n<li>线性回归</li>\n<li>softmax 回归</li>\n</ul>\n</li>\n</ul>\n<p>练习过的代码在</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2xhZ3JhbmdlMTAvRGVlcExlYXJuaW5nL3RyZWUvbWFpbi93ZWVrMV9ETHByZS9zcmM=\">DeepLearning/week1_DLpre/src at main · lagrange10/DeepLearning (github.com)</span></p>\n<h1 id=\"深度学习基础\"><a class=\"anchor\" href=\"#深度学习基础\">#</a> 深度学习基础</h1>\n<h2 id=\"矩阵求导\"><a class=\"anchor\" href=\"#矩阵求导\">#</a> 矩阵求导</h2>\n<p>做了一些推导和实例计算..</p>\n<p><img data-src=\"DeepLearning1-basic/1657651037531-16576511047732.jpg\" alt=\"1657651037531-16576511047732\" /></p>\n<h2 id=\"自动求导\"><a class=\"anchor\" href=\"#自动求导\">#</a> 自动求导</h2>\n<p>主要是反向累积的思想</p>\n<p>步骤：</p>\n<ol>\n<li>构造计算图</li>\n<li>前向执行计算图</li>\n<li>反向求梯度（输入：前向执行和反向的过程中的数据 输出：需要的梯度）（空间换时间）</li>\n<li>去除枝</li>\n</ol>\n<p><img data-src=\"DeepLearning1-basic/image-20220717001801786.png\" alt=\"image-20220717001801786\" /></p>\n<h2 id=\"pandas数据处理\"><a class=\"anchor\" href=\"#pandas数据处理\">#</a> pandas 数据处理</h2>\n<h3 id=\"缺失数据处理\"><a class=\"anchor\" href=\"#缺失数据处理\">#</a> 缺失数据处理</h3>\n<p>通常采用插值、删除。</p>\n<p>对数据进行插值时，不能对字符串这类数据插值为平均值。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>inputs <span class=\"token operator\">=</span> inputs<span class=\"token punctuation\">.</span>fillna<span class=\"token punctuation\">(</span>inputs<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>因此可以将 NAN 视为一个类别，从而转化为一个张量格式。</p>\n<h4 id=\"独热编码one-hot-encode\"><a class=\"anchor\" href=\"#独热编码one-hot-encode\">#</a> 独热编码 (one-hot encode)</h4>\n<p>通常，将「代表类型的数据」存储为 0，1，2 可以减少开销，但机器学习中存在大量加权平均的操作，这样会在加权平均后暗含 “2” 比 “0”，“1” 要 “好” 的意思，相当于强加了一个偏序关系。</p>\n<p>因此，对于不含偏序关系的类别采用独热编码，将类型视为一个特征，可以解决上面的问题。</p>\n<p>在上面的例子中，把 Pave，NAN 类型转换为独热编码，解决了插值问题。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>NumRooms Alley</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">0</span>       <span class=\"token number\">3.0</span>  Pave</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">1</span>       <span class=\"token number\">2.0</span>   NaN</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">2</span>       <span class=\"token number\">4.0</span>   NaN</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">3</span>       <span class=\"token number\">3.0</span>   NaN</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>inputs <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>get_dummies<span class=\"token punctuation\">(</span>inputs<span class=\"token punctuation\">,</span>dummy_na<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   NumRooms  Alley_Pave  Alley_nan</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">0</span>       <span class=\"token number\">3.0</span>           <span class=\"token number\">1</span>          <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">1</span>       <span class=\"token number\">2.0</span>           <span class=\"token number\">0</span>          <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">2</span>       <span class=\"token number\">4.0</span>           <span class=\"token number\">0</span>          <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">3</span>       <span class=\"token number\">3.0</span>           <span class=\"token number\">0</span>          <span class=\"token number\">1</span></pre></td></tr></table></figure><h2 id=\"线性回归\"><a class=\"anchor\" href=\"#线性回归\">#</a> 线性回归</h2>\n<p>假设特征和标签的关系是线性的加上一个服从正态分布的噪声，一个最简单的模型。</p>\n<p>通过均方差的损失函数衡量模型的好坏，更新模型参数 W 和 B。</p>\n<h2 id=\"softmax回归\"><a class=\"anchor\" href=\"#softmax回归\">#</a> Softmax 回归</h2>\n<p>背景是一个 q 类分类的问题。模型通过 d 个输入特征，经过一层的线性网络得到未经规范化的输出 o-hat，将 o-hat 通过 softmax 算子对输出进行概率归一化得到预测输出 y-hat。</p>\n<p>目标：最小化 y-hat 与真实输出 y 的差异（以交叉熵为损失函数来衡量），以此<strong>更新模型参数 W 和 B</strong>。让得到的模型有更高的预测准确率。</p>\n<h3 id=\"损失函数\"><a class=\"anchor\" href=\"#损失函数\">#</a> 损失函数</h3>\n<p><img data-src=\"DeepLearning1-basic/image-20220714195729926.png\" alt=\"image-20220714195729926\" /></p>\n<h1 id=\"python语法\"><a class=\"anchor\" href=\"#python语法\">#</a> python 语法</h1>\n<h2 id=\"assert\"><a class=\"anchor\" href=\"#assert\">#</a> assert</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">assert</span> expression</pre></td></tr></table></figure><p>等价于</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> expression<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">raise</span> AssertionError</pre></td></tr></table></figure><p>eg:</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">assert</span> train_loss <span class=\"token operator\">&lt;</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> train_loss   <span class=\"token comment\"># 训练损失一定不为 0，在 0 和 0.5 之间</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">assert</span> train_acc <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span> <span class=\"token keyword\">and</span> train_acc <span class=\"token operator\">></span> <span class=\"token number\">0.7</span><span class=\"token punctuation\">,</span> train_acc <span class=\"token comment\"># 训练集准确率一定不为 0，在 0.7 和 1 之间</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">assert</span> test_acc <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span> <span class=\"token keyword\">and</span> test_acc <span class=\"token operator\">></span> <span class=\"token number\">0.7</span><span class=\"token punctuation\">,</span> test_acc <span class=\"token comment\"># 测试集准确率一定不为 0，在 0.7 和 1 之间</span></pre></td></tr></table></figure><h2 id=\"迭代器-生成器-yield\"><a class=\"anchor\" href=\"#迭代器-生成器-yield\">#</a> 迭代器、生成器、yield</h2>\n<p>可迭代对象：可以 for...in... 遍历的</p>\n<p>eg: torch.utils.data.DataLoader 用数据集构造的可迭代对象，每次取样一批数据</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">load_array</span><span class=\"token punctuation\">(</span>data_arrays<span class=\"token punctuation\">,</span> batch_size<span class=\"token punctuation\">,</span> is_train<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"构造一个PyTorch数据迭代器\"\"\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    dataset <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>TensorDataset<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>data_arrays<span class=\"token punctuation\">)</span> <span class=\"token comment\">#* 是解包</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">.</span>DataLoader<span class=\"token punctuation\">(</span>dataset<span class=\"token punctuation\">,</span> batch_size<span class=\"token punctuation\">,</span> shuffle<span class=\"token operator\">=</span>is_train<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>batch_size <span class=\"token operator\">=</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>data_iter <span class=\"token operator\">=</span> load_array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>features<span class=\"token punctuation\">,</span> labels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> batch_size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">for</span> X<span class=\"token punctuation\">,</span>y <span class=\"token keyword\">in</span> data_iter<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token comment\"># 可以访问遍历</span></pre></td></tr></table></figure><p>一些尝试 ./test/test.py</p>\n",
            "tags": [
                "DeepLearning"
            ]
        },
        {
            "id": "https://lagrange10.github.io/ctg_blog.github.io/2022/07/06/concept2-semantic/",
            "url": "https://lagrange10.github.io/ctg_blog.github.io/2022/07/06/concept2-semantic/",
            "title": "concept2-semantic",
            "date_published": "2022-07-06T03:30:51.000Z",
            "content_html": "<p>In <span class=\"exturl\" data-url=\"aHR0cDovL2VuLnZvbHVwZWRpYS5vcmcvd2lraS9Db21wdXRlcl9zY2llbmNl\">computer science</span>, the term <em>semantics</em> refers to the meaning of language constructs, as opposed to their form (<span class=\"exturl\" data-url=\"aHR0cDovL2VuLnZvbHVwZWRpYS5vcmcvd2lraS9TeW50YXhfKGxvZ2ljKQ==\">syntax</span>). According to Euzenat, semantics “provides the rules for interpreting the syntax which do not provide the meaning directly but constrains the possible interpretations of what is declared”.</p>\n<p>#d 图像识别中的语义</p>\n<p>图像的语义分为视觉层、对象层和概念层。</p>\n<p>视觉层即通常所理解的底层，即颜色、纹理和形状等等，这些特征都被称为底层特征语义；<br>对象层即中间层，通常包含了属性特征等，就是某一对象在某一时刻的状态；</p>\n<p>概念层是高层，是图像表达出的最接近人类理解的东西。<br>通俗点说，比如一张图上有沙子，蓝天，海水等，视觉层是一块块的区分，对象层是沙子、蓝天和海水这些，<br>概念层就是海滩，这是这张图表现出的语义。</p>\n<h1 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h1><p>#d 语义</p>\n<p>语义是对形式的解释。</p>\n<p>#t 语法</p>\n<p>与语义相对，是形式，独立于语义。</p>\n<p>#e 图像处理中的语义</p>\n<p>在这里，语义是颜色纹理，概念，图景是什么等。</p>\n",
            "tags": [
                "CV"
            ]
        },
        {
            "id": "https://lagrange10.github.io/ctg_blog.github.io/2022/07/06/concept1-texture/",
            "url": "https://lagrange10.github.io/ctg_blog.github.io/2022/07/06/concept1-texture/",
            "title": "concept1-texture",
            "date_published": "2022-07-06T02:55:43.000Z",
            "content_html": "<h1 id=\"纹理\"><a class=\"anchor\" href=\"#纹理\">#</a> 纹理</h1>\n<p>#d 物理属性与纹理</p>\n<p>纹理是由于物体表面的物理属性的多样性而造成的，物理属性不同表示某个特定表面特征的灰度或者颜色信息不同，不同的物理表面会产生不同的纹理图像，因而纹理作为图像的一个极为重要的属性，在计算机视觉和图像处理中占有举足轻重的地位。</p>\n<p>#d 纹理</p>\n<p>纹理是图像中特征值强度的某种<strong>局部重复模式</strong>的宏观表现。然而，对于自然纹理图像而言这种重复模式往往是近似的和复杂的，难以用语言描述，而人类对纹理的感受多是与心理效果相结合的，因此，迄今都没有一个对纹理的正式的、广泛认可的和一致的定义。</p>\n<p>Hawkins 曾经对纹理给出了一个比较详细的描述，他认为纹理有三个主要的标志:</p>\n<ol>\n<li>某种局部的序列性在比该序列更大的区域内不断重复。</li>\n<li>序列是由基本元素非随机排列组成的。</li>\n<li>各部分大致是均匀的统体，在纹理区域内的任何地方都有大致相同的结构尺。</li>\n</ol>\n<p>除了下面这种规则的纹理，也有不规则的，然而对于纹理（texture）的关注，其意义或者用途在于：Texture-related tasks。</p>\n<p>#e 纹理相关工作</p>\n<ul>\n<li>shape from texture。 从纹理中恢复形状。</li>\n<li>segmentation/classification from texture cues。纹理分析</li>\n</ul>\n<p><img data-src=\"v2-a803b5d3c0c17be7cff2147d82799bd8_1440w.jpg\" alt=\"img\" /></p>\n<ul>\n<li>synthesis。用于图像合成</li>\n</ul>\n<p>#d 分析纹理的原因</p>\n<ul>\n<li>often indicative of a material's properties；通常指示材料的特性</li>\n<li>can be important appearance cue, especially if shape is similar across objects；<br />\n可能是重要的外观提示，尤其是当对象之间的形状相似时</li>\n<li>aim to distinguish between shape, boundaries, and texture；旨在区分形状，边界和纹理</li>\n</ul>\n<h1 id=\"验证\"><a class=\"anchor\" href=\"#验证\">#</a> 验证</h1>\n<p>#d 纹理</p>\n<p>纹理是某种反复出现的图像模式，能反映材料的物理特性。可以用于图像修补，图像合成等。</p>\n<p>#e 纹理</p>\n<p><img data-src=\"v2-048ec3ab515e23f3ccbb448766df8be4_r.jpg\" alt=\"preview\" /></p>\n",
            "tags": [
                "CV"
            ]
        },
        {
            "id": "https://lagrange10.github.io/ctg_blog.github.io/2022/07/05/optical-flow/",
            "url": "https://lagrange10.github.io/ctg_blog.github.io/2022/07/05/optical-flow/",
            "title": "optical_flow",
            "date_published": "2022-07-05T11:52:11.000Z",
            "content_html": "<h1 id=\"光流法\"><a class=\"anchor\" href=\"#光流法\">#</a> 光流法</h1>\n<h2 id=\"光流\"><a class=\"anchor\" href=\"#光流\">#</a> 光流</h2>\n<p>#d 光流 1</p>\n<p>图像亮度模式的表观运动（apparent motion）</p>\n<p>#d 光流 2</p>\n<p>看上去是瞬时速率（i.e. 表观运动的速度）</p>\n<p>#d 光流是运动场的简化</p>\n<p>包含了「物体的运动信息」和「物体的三维结构信息」，如何用简化的光流恢复物体的 3d 结构和运动信息是计算机视觉中的一个关键问题。</p>\n<p>#e 光流法的用途</p>\n<p>通常是运动估计，通过光流场可以分离出运动物体，从而完成诸如「行人计数」等工作。</p>\n<p>用估计的运动来达成「图像动画」的效果。</p>\n<h2 id=\"计算光流\"><a class=\"anchor\" href=\"#计算光流\">#</a> 计算光流</h2>\n<h3 id=\"光流约束方程\"><a class=\"anchor\" href=\"#光流约束方程\">#</a> 光流约束方程</h3>\n<h4 id=\"基本假设\"><a class=\"anchor\" href=\"#基本假设\">#</a> 基本假设</h4>\n<ol>\n<li>每个像素点经过运动后亮度不变</li>\n<li>在很小的一块图像中，运动场是连续的（因此光流也连续）。运动也得是小的运动。</li>\n</ol>\n<h4 id=\"约束方程的推导\"><a class=\"anchor\" href=\"#约束方程的推导\">#</a> 约束方程的推导</h4>\n<p>根据亮度不变的假设，使用泰勒展开泰勒展开，有</p>\n<p><img data-src=\"image-20220706004953608.png\" alt=\"image-20220706004953608\" /></p>\n<p>其中 (u,v) 就是所求的光流。然而仅仅一个约束方程无法求解 2 个未知数，因而需要一些求解算法来近似求得光流。其中著名的有 LK 算法（Lucas-Kanade）。</p>\n<h2 id=\"lucas-kanade方法\"><a class=\"anchor\" href=\"#lucas-kanade方法\">#</a> Lucas-Kanade 方法</h2>\n",
            "tags": [
                "CV"
            ]
        },
        {
            "id": "https://lagrange10.github.io/ctg_blog.github.io/2022/07/04/project-moshou-review/",
            "url": "https://lagrange10.github.io/ctg_blog.github.io/2022/07/04/project-moshou-review/",
            "title": "project_moshou_review",
            "date_published": "2022-07-04T07:30:43.000Z",
            "content_html": "<h1 id=\"题目描述\"><a class=\"anchor\" href=\"#题目描述\">#</a> 题目描述</h1>\n<p>原题目链接</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2N4c2pzeC5vcGVuanVkZ2UuY24vMjAxOGh3YWxsLzAyNC8=\">OpenJudge - 024: 魔兽世界三 (开战)</span></p>\n<h2 id=\"一些对题目的理解\"><a class=\"anchor\" href=\"#一些对题目的理解\">#</a> 一些对题目的理解</h2>\n<p>每个回合（一个小时内）会发生诸如降生，逃跑，前进等的事件。</p>\n<p>双方司令部之间有若干城市，编号 1-n, 战士每个回合前进一步，一旦有城市有 2 个战士，就会发生战斗，战斗如果发生平局，双方都活着就会继续前进。</p>\n<p>战士拥有武器，战士靠武器伤害敌军，每个回合选择一个武器（从编号最小的武器开始轮流），直到一方胜利，双方都死亡或者双方平局（双方没有武器或<strong>双方的武器和生命值不再发生变化</strong>）</p>\n<h3 id=\"武器特点\"><a class=\"anchor\" href=\"#武器特点\">#</a> 武器特点</h3>\n<ul>\n<li>sword 使用次数无限，攻击力是战士本身的 20%。</li>\n<li>bomb 使用次数 1，攻击力 40%，对自己 20%。</li>\n<li>arrow 使用次数 2，攻击力 30%</li>\n</ul>\n<h3 id=\"战士特点\"><a class=\"anchor\" href=\"#战士特点\">#</a> 战士特点：</h3>\n<ul>\n<li>龙 dragon 在战斗中存活会欢呼。</li>\n<li>忍者 ninja 使用 bomb 不会伤到自己。</li>\n<li>冰人 iceman 每次前进会损失 10% 生命值。</li>\n<li>狮子 lion 有忠诚值属性，每次前进会损失，损失到 0 会逃跑。</li>\n<li>狼 wolf 没有自带武器，但可以抢夺敌人编号最小的武器。</li>\n</ul>\n<h1 id=\"类的设计\"><a class=\"anchor\" href=\"#类的设计\">#</a> 类的设计</h1>\n<p><img data-src=\"image-20220705000107633.png\" alt=\"image-20220705000107633\" /></p>\n<p><img data-src=\"image-20220705000125951.png\" alt=\"image-20220705000125951\" /></p>\n<p>整个项目中所有要用到的参数，城市，指挥部都放在 Factory 类中，通过 Factory 类可以访问任何东西。</p>\n<p>Timer 是一个仅仅有静态变量和方法的类，与其它类也没有关系，因为整个过程中时间是唯一的，不需要实例化。</p>\n<p>在 Headquarters 中有它目前管理的战士指针数组，即 vector&lt;Warrior*&gt;。战士类派生出五种战士。</p>\n<p>每个战士有自己的武器库 vector&lt;Weapon&gt;</p>\n<p>在 Factory 类中，操纵 city 数组来完成行军，战斗等功能。</p>\n<h1 id=\"一些关键部分的实现\"><a class=\"anchor\" href=\"#一些关键部分的实现\">#</a> 一些关键部分的实现</h1>\n<h2 id=\"整体框架\"><a class=\"anchor\" href=\"#整体框架\">#</a> 整体框架</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token class-name\">Factory</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">InitProject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">int</span> cnt<span class=\"token punctuation\">,</span> n <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//cnt: 数据组数 n: 该组数据的编号</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tcin <span class=\"token operator\">>></span> cnt<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token comment\">//Factory::InputData();</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cnt<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token class-name\">Factory</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">InputData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\tFactory f<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\tf<span class=\"token punctuation\">.</span><span class=\"token function\">Start</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 项目开始</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token class-name\">Timer</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">InitTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\tn<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\thead_red <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Headquarters</span><span class=\"token punctuation\">(</span>RED<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\thead_blue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Headquarters</span><span class=\"token punctuation\">(</span>BLUE<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Case \"</span> <span class=\"token operator\">&lt;&lt;</span> n <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token comment\">/* cout events */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isEnd <span class=\"token operator\">&amp;&amp;</span> <span class=\"token class-name\">Timer</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">GetMin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span>Timer<span class=\"token double-colon punctuation\">::</span>totalGameTime<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\t<span class=\"token function\">Update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t<span class=\"token class-name\">Timer</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">UpdateHour</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 更新时间</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 一个小时内的事情与打印日志</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">Update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token comment\">// 降生播报</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\thead_red<span class=\"token operator\">-></span><span class=\"token function\">WarriorsBirth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\thead_blue<span class=\"token operator\">-></span><span class=\"token function\">WarriorsBirth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token class-name\">Timer</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">UpdateMin</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Timer</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">GetMin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> Timer<span class=\"token double-colon punctuation\">::</span>totalGameTime<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token comment\">/* lion run */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token function\">RunReport</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token class-name\">Timer</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">UpdateMin</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Timer</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">GetMin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> Timer<span class=\"token double-colon punctuation\">::</span>totalGameTime<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token comment\">/* march */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\thead_red<span class=\"token operator\">-></span><span class=\"token function\">WarriorsMarch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\thead_blue<span class=\"token operator\">-></span><span class=\"token function\">WarriorsMarch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token function\">MarchReport</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isEnd<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token class-name\">Timer</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">UpdateMin</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Timer</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">GetMin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> Timer<span class=\"token double-colon punctuation\">::</span>totalGameTime<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token comment\">/* wolf */</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token function\">WolfSnatchReport</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token class-name\">Timer</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">UpdateMin</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Timer</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">GetMin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> Timer<span class=\"token double-colon punctuation\">::</span>totalGameTime<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token comment\">/* battle 40min*/</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token function\">Battle_report</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t<span class=\"token class-name\">Timer</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">UpdateMin</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Timer</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">GetMin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> Timer<span class=\"token double-colon punctuation\">::</span>totalGameTime<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t<span class=\"token comment\">// 指挥部状态播报</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\thead_red<span class=\"token operator\">-></span><span class=\"token function\">HeadquartersStatus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\thead_blue<span class=\"token operator\">-></span><span class=\"token function\">HeadquartersStatus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token comment\">// 战士状态播报</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t<span class=\"token class-name\">Timer</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">UpdateMin</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t<span class=\"token function\">WarriorReport</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"战斗过程\"><a class=\"anchor\" href=\"#战斗过程\">#</a> 战斗过程</h2>\n<h3 id=\"主要过程在一个城市内\"><a class=\"anchor\" href=\"#主要过程在一个城市内\">#</a> 主要过程 (在一个城市内)</h3>\n<ol>\n<li>对武器排序</li>\n<li>（若红方先手）红方攻击</li>\n<li>检查结果</li>\n<li>蓝方攻击</li>\n<li>检查结果</li>\n<li>看看是不是平衡了</li>\n</ol>\n<p>注：其中检查有战士死亡的情况很容易，但检查是不是平局必须考虑题目中非常坑的一点，就是战士的攻击力可能为 0，如果不额外判断可能导致程序进入死循环。且平局的情况要求用完所有有使用次数的武器。因此设计了一个算法：首先有一个计数器值为 20（最极端的情况有 10 把 arrow，每个 arrow 可以用 2 次），表明 20 个回合检查一次是否平衡。假如计数器为 0，那么就看看这个战士的武器使用次数和生命值是不是不再变化了，如果是说明平局。具体代码在函数 CheckBalance 中。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">City</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Battle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r_w <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">||</span> b_w <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 没有战斗发生</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tWarrior<span class=\"token operator\">*</span> r_w <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>r_w<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span> b_w <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>b_w<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tturn <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> RED <span class=\"token operator\">:</span> BLUE<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 奇数城市，红先攻击</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tWeapon<span class=\"token operator\">*</span> red_weapon<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span> blue_weapon<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">// 排序</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tr_w<span class=\"token operator\">-></span><span class=\"token function\">WeaponSort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tb_w<span class=\"token operator\">-></span><span class=\"token function\">WeaponSort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">int</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">int</span> round <span class=\"token operator\">=</span> MAXROUND<span class=\"token punctuation\">;</span> <span class=\"token comment\">//MAXROUND 是一个宏，值为 20</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">int</span> r_life <span class=\"token operator\">=</span> r_w<span class=\"token operator\">-></span><span class=\"token function\">GetCurLife</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> b_life <span class=\"token operator\">=</span> b_w<span class=\"token operator\">-></span><span class=\"token function\">GetCurLife</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">int</span> r_weapon_time <span class=\"token operator\">=</span> r_w<span class=\"token operator\">-></span><span class=\"token function\">GetWeaponSum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> b_weapon_time <span class=\"token operator\">=</span> b_w<span class=\"token operator\">-></span><span class=\"token function\">GetWeaponSum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token comment\">/* 战斗过程 */</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>RED <span class=\"token operator\">==</span> turn<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token comment\">// 红方先手</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>r_w<span class=\"token operator\">-></span><span class=\"token function\">IsDead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>b_w<span class=\"token operator\">-></span><span class=\"token function\">IsDead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\tred_weapon <span class=\"token operator\">=</span> r_w<span class=\"token operator\">-></span><span class=\"token function\">SelectWeapon</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\tblue_weapon <span class=\"token operator\">=</span> b_w<span class=\"token operator\">-></span><span class=\"token function\">SelectWeapon</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\tr_w<span class=\"token operator\">-></span><span class=\"token function\">Attack</span><span class=\"token punctuation\">(</span>b_w<span class=\"token punctuation\">,</span> red_weapon<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\t<span class=\"token comment\">// 红方胜利？</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\tret <span class=\"token operator\">=</span> <span class=\"token function\">CheckResult</span><span class=\"token punctuation\">(</span>r_w<span class=\"token punctuation\">,</span> b_w<span class=\"token punctuation\">,</span> red_weapon<span class=\"token punctuation\">,</span> blue_weapon<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">==</span> ret<span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\tb_w<span class=\"token operator\">-></span><span class=\"token function\">Attack</span><span class=\"token punctuation\">(</span>r_w<span class=\"token punctuation\">,</span> blue_weapon<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\tret <span class=\"token operator\">=</span> <span class=\"token function\">CheckResult</span><span class=\"token punctuation\">(</span>r_w<span class=\"token punctuation\">,</span> b_w<span class=\"token punctuation\">,</span> red_weapon<span class=\"token punctuation\">,</span> blue_weapon<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">==</span> ret<span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t\tret <span class=\"token operator\">=</span> <span class=\"token function\">CheckBalance</span><span class=\"token punctuation\">(</span>round<span class=\"token punctuation\">,</span> r_w<span class=\"token punctuation\">,</span> b_w<span class=\"token punctuation\">,</span> r_life<span class=\"token punctuation\">,</span> b_life<span class=\"token punctuation\">,</span> r_weapon_time<span class=\"token punctuation\">,</span> b_weapon_time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">==</span> ret<span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t<span class=\"token comment\">// 蓝方先手</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>r_w<span class=\"token operator\">-></span><span class=\"token function\">IsDead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>b_w<span class=\"token operator\">-></span><span class=\"token function\">IsDead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t\tred_weapon <span class=\"token operator\">=</span> r_w<span class=\"token operator\">-></span><span class=\"token function\">SelectWeapon</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t\tblue_weapon <span class=\"token operator\">=</span> b_w<span class=\"token operator\">-></span><span class=\"token function\">SelectWeapon</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t\tb_w<span class=\"token operator\">-></span><span class=\"token function\">Attack</span><span class=\"token punctuation\">(</span>r_w<span class=\"token punctuation\">,</span> blue_weapon<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t\tret <span class=\"token operator\">=</span> <span class=\"token function\">CheckResult</span><span class=\"token punctuation\">(</span>r_w<span class=\"token punctuation\">,</span> b_w<span class=\"token punctuation\">,</span> red_weapon<span class=\"token punctuation\">,</span> blue_weapon<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">==</span> ret<span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t\tr_w<span class=\"token operator\">-></span><span class=\"token function\">Attack</span><span class=\"token punctuation\">(</span>b_w<span class=\"token punctuation\">,</span> red_weapon<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t\tret <span class=\"token operator\">=</span> <span class=\"token function\">CheckResult</span><span class=\"token punctuation\">(</span>r_w<span class=\"token punctuation\">,</span> b_w<span class=\"token punctuation\">,</span> red_weapon<span class=\"token punctuation\">,</span> blue_weapon<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">==</span> ret<span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t\tret <span class=\"token operator\">=</span> <span class=\"token function\">CheckBalance</span><span class=\"token punctuation\">(</span>round<span class=\"token punctuation\">,</span> r_w<span class=\"token punctuation\">,</span> b_w<span class=\"token punctuation\">,</span> r_life<span class=\"token punctuation\">,</span> b_life<span class=\"token punctuation\">,</span> r_weapon_time<span class=\"token punctuation\">,</span> b_weapon_time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">==</span> ret<span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token comment\">/* 欢呼 */</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r_w<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\tr_w<span class=\"token operator\">-></span><span class=\"token function\">Yell</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\tr_w<span class=\"token operator\">-></span><span class=\"token function\">ResetTurn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b_w<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\tb_w<span class=\"token operator\">-></span><span class=\"token function\">Yell</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t\tb_w<span class=\"token operator\">-></span><span class=\"token function\">ResetTurn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 检查状态（武器 + 生命值）是否不再变化</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token class-name\">City</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">CheckBalance</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> round<span class=\"token punctuation\">,</span> Warrior<span class=\"token operator\">*</span> r_w<span class=\"token punctuation\">,</span> Warrior<span class=\"token operator\">*</span> b_w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> r_life<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> b_life<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> r_weapon_time<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> b_weapon_time<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tround<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">==</span> round<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\tround <span class=\"token operator\">=</span> MAXROUND<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r_w<span class=\"token operator\">-></span><span class=\"token function\">GetCurLife</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> r_life <span class=\"token operator\">&amp;&amp;</span> b_w<span class=\"token operator\">-></span><span class=\"token function\">GetCurLife</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> b_life</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t<span class=\"token operator\">&amp;&amp;</span> r_w<span class=\"token operator\">-></span><span class=\"token function\">GetWeaponSum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> r_weapon_time <span class=\"token operator\">&amp;&amp;</span> b_w<span class=\"token operator\">-></span><span class=\"token function\">GetWeaponSum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> b_weapon_time</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t<span class=\"token comment\">// 状态不变</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t<span class=\"token function\">BalanceLog</span><span class=\"token punctuation\">(</span>r_w<span class=\"token punctuation\">,</span> b_w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\tret <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\tr_life <span class=\"token operator\">=</span> r_w<span class=\"token operator\">-></span><span class=\"token function\">GetCurLife</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t\tb_life <span class=\"token operator\">=</span> b_w<span class=\"token operator\">-></span><span class=\"token function\">GetCurLife</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\tr_weapon_time <span class=\"token operator\">=</span> r_w<span class=\"token operator\">-></span><span class=\"token function\">GetWeaponSum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\tb_weapon_time <span class=\"token operator\">=</span> b_w<span class=\"token operator\">-></span><span class=\"token function\">GetWeaponSum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h1>\n<p>遇到了无数 bug，但是很多都有点忘了，总结了一些技巧</p>\n<ul>\n<li>如果编译器不认识自己的类要活用<strong>前向声明</strong>。</li>\n<li>尽量在组合成的类中有指向父类的指针，方便操作，父子能相互访问。</li>\n<li>大胆用指针，比如 new 一个战士出来，加到 vector 中。</li>\n</ul>\n",
            "tags": [
                "learnCPP"
            ]
        }
    ]
}